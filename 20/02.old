#! /usr/bin/env python3
import re
import math
from collections import defaultdict

# ==== INPUT ====
data = ""
with open('20.txt', 'r') as file:
# with open('test_20.txt', 'r') as file:
    data = file.read().strip()

tiles = [[row.strip() for row in tile.split('\n')] for tile in data.split('\n\n')]

# ==== SOLUTION ====

def get_borders(tile):
    width, height = len(tile[0]), len(tile)
    borders = []
    borders.append(tile[0])
    borders.append(tile[-1])
    l, r = "", ""
    for i in range(height):
        l += tile[i][0]
        r += tile[i][-1]
    borders.append(l)
    borders.append(r)

    # TOP, BOTTOM, LEFT, RIGHT
    return borders


borders = {}

edge_map = {}

for tile in tiles:
    uid = int(''.join(tile[0][5:-1]))
    pixels = tile[1:]

    border_set = get_borders(pixels)

    borders[uid] = border_set

    for i in range(len(border_set)):
        border = border_set[i]
        if border not in edge_map:
            edge_map[border] = []
        edge_map[border].append((uid, i))

print(edge_map)

below = {}
right = {}

for edge in edge_map.keys():
    pairs = edge_map[edge]
    if len(pairs) == 2:
        print(pairs)
        # if pairs[0][1] == 0 and pairs[1][1] == 1:
        #     below[pairs[0][0]] = pairs[1][0]
        # elif pairs[0][1] == 1 and pairs[1][1] == 0:
        #     below[pairs[1][0]] = pairs[0][0]

        # elif pairs[0][1] == 2 and pairs[1][1] == 3:
        #     right[pairs[0][0]] = pairs[1][0]
        # elif pairs[0][1] == 3 and pairs[1][1] == 2:
        #     right[pairs[1][0]] = pairs[0][0]


        if pairs[0][1] == 0:
            below[pairs[0][0]] = pairs[1][0]
        elif pairs[0][1] == 1:
            below[pairs[1][0]] = pairs[0][0]

        elif pairs[0][1] == 2:
            right[pairs[0][0]] = pairs[1][0]
        elif pairs[0][1] == 3:
            right[pairs[1][0]] = pairs[0][0]


print(below)
print(right)



id_matches = {}

for uid in borders.keys():
    matches = {}

    # TOP, BOTTOM, LEFT, RIGHT (FTOP, FBOTTOM, FLEFT, FRIGHT)
    edges = borders[uid]
    edges.extend([s[::-1] for s in edges])

    matches = {}
    for i in range(len(edges)):
        matches[i] = []

    for nuid in borders.keys():
        if nuid == uid:
            continue

        nedges = set(borders[nuid])
        for i in range(len(edges)):
            edge = edges[i]
            if edge in nedges:
                matches[i].append(nuid)

    print(uid, matches)
    id_matches[uid] = matches

dim = math.isqrt(len(borders.keys()))
grid = [[set() for x in range(dim)] for y in range(dim)]

print()
corners = []
for uid in id_matches.keys():
    options = id_matches[uid]
    pids = set()
    for i in range(len(options.keys())):
        xids = options[i]
        for x in xids:
            pids.add(x)
    if len(pids) == 2:
        corners.append(uid)


finished = set()

def do_below(uid, y, x):
    finished.add(uid)
    if uid in below and y + 1 < dim:
        grid[y+1][x] = below[uid]
        do_right(below[uid], y+1, x)
        do_below(below[uid], y+1, x)

def do_right(uid, y, x):
    finished.add(uid)
    if uid in right and x + 1 < dim:
        grid[y][x+1] = right[uid]
        do_right(right[uid], y, x+1)
        do_below(right[uid], y, x+1)

for corner in corners:
    faces = id_matches[corner]

    x, y = (0, 0)
    if faces[0] and faces[3] and faces[3] == faces[7]:
        grid[0][0] = corner
        grid[0][1] = faces[3][0]
        grid[1][0] = faces[0][0]
        finished.add(corner)
        finished.add(faces[3][0])
        finished.add(faces[0][0])

        do_below(faces[3][0], y, x+1)
        do_below(faces[0][0], y+1, x)

        do_right(faces[3][0], y, x+1)
        do_right(faces[0][0], y+1, x)
        break

print()
for row in grid:
    print(row)
print()


for fin in finished:
    for key in id_matches.keys():
        matchs = id_matches[key]
        for i in matchs.keys():
            matchs[i] = [value for value in matchs[i] if value != fin]

for m in id_matches.keys():
    ms = id_matches[m]
    vals = set()
    for x in ms.keys():
        for i in ms[x]:
            vals.add(i)
    if len(vals) == 2:
        print(m, ms)
